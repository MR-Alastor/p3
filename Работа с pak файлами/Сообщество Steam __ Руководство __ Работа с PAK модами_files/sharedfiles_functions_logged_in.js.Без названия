
"use strict";

// I know what you're thinking. No, it won't work.
function WorkshopSetAccepted(item_id)
{
	if(!confirm("Are you sure you want to promote this item to Accepted? This is difficult to undo and should only be done" +
		"if you are REALLY REALLY sure you want to do this."))
		return;

	$J.post( 'https://steamcommunity.com/sharedfiles/setaccepted', { id: item_id, sessionid: g_sessionID } )
	.done( function( json ) {
		switch ( json.success )
		{
			case 1:
				window.location.reload();
				break;
			default:
				ShowAlertDialog( 'Ошибка', json.error );
		}
	} );
}

// Still won't work.
function WorkshopSetPending(item_id)
{
	if(!confirm("Are you sure you want to promote this item to Pending? This is difficult to undo and should only be done" +
		"if you are REALLY REALLY sure you want to do this."))
		return;

	var options = {
		method: 'post',
		postBody: 'id=' + item_id + '&sessionid=' + g_sessionID,
		onComplete: (function(item_id){
			return function(transport)
			{
				window.location.reload();
			}
		}(item_id))
	};
	new Ajax.Request(
		'https://steamcommunity.com/sharedfiles/setpending',
		options
	);
}

function CheckVoteResults( transport )
{
	var json = transport.responseText.evalJSON();
	return CheckVoteResultsJSON( json );
}

function CheckVoteResultsJSON( json )
{
	switch ( json['success'] )
	{
		case 16:
			ShowAlertDialog( 'Ошибка', 'Не удалось отправить запрос на наши серверы. Пожалуйста, попробуйте ещё раз.' );
			return false;
		case 112:
			ShowAlertDialog( 'Ошибка', 'Ваш аккаунт не отвечает необходимым требованиям для использования этой функции. Подробности на сайте <a class="whiteLink" href="https://help.steampowered.com/ru/wizard/HelpWithLimitedAccount" target="_blank" rel="">службы поддержки Steam</a>.' );
			return false;
		case 21:
			ShowAlertDialog( 'Ошибка', 'Чтобы выполнить это действие, войдите в аккаунт.' );
			return false;
		case 15:
			ShowAlertDialog( 'Ошибка', 'У вашего аккаунта недостаточно привилегий для выполнения этого действия. Пожалуйста, убедитесь, что у вас есть эта игра, и что ваш аккаунт не заблокирован.' );
			return false;
		case 17:
			ShowAlertDialog( 'Ошибка', 'Вы не можете проголосовать за этот предмет, так как на вашем аккаунте имеется блокировка VAC или игровая блокировка.' );
			return false;
		case 24:
			ShowAlertDialog( 'Ошибка', 'Чтобы голосовать, необходимо включить <a href="https://store.steampowered.com/twofactor/manage" target="_blank" rel="">Steam Guard</a>.' );
			return false;
		case 20:
			ShowAlertDialog( 'Ошибка', 'Этот контент больше нельзя оценить. ' );
			return false;
		case 44:
			ShowAlertDialog( 'Ошибка', 'Вы не можете оценивать контент, поскольку недавно сменили пароль или адрес электронной почты аккаунта. Обычно это ограничение действует 5 дней, но срок может увеличиться до 30 дней, если в последнее время аккаунт был неактивен.' );
			return false;
		case 41:
			ShowAlertDialog( 'Ошибка', 'Недавно с вашего аккаунта положительно оценили объект, заблокированный за нарушение правил и принципов Steam. По этой причине вам временно запрещено оценивать пользовательский контент.' );
			return false;
		case 1:
			return true;
		default:
			ShowAlertDialog( 'Ошибка', 'Во время отправки вашего запроса возникла ошибка.' );
			return false;
	}
}

// Find a button for a given item_id, or use a fallback.
// This can still return an empty result if neither exist.
function FindButton( item_id, prefix, fallback, bUseFallback = true )
{
    const button = $(prefix + item_id);

    if (button == null && bUseFallback)
    {
        return $(fallback);
    }

    return button;
}

// Locate our various buttons, so we don't need to care if we're on
// a page with one item, or many.
// TODO: All this functionality should be in a class, and lazily evaluated.

function FindVoteButtons(item_id, bUseFallback = true)
{
	return {
        voteUp:    FindButton( item_id, 'vote_up_',     'VoteUpBtn'  ,      bUseFallback ),
        voteDown:  FindButton( item_id, 'vote_down_',   'VoteDownBtn',      bUseFallback ),
        favorite:  FindButton( item_id, 'favorite_',    'FavoriteItemBtn',  bUseFallback ),
        wait:      FindButton( item_id, 'action_wait_', 'action_wait',      bUseFallback ),
        subscribe: FindButton( item_id, 'subscribed_',  'SubscribeItemBtn', bUseFallback )
    };
}

// Sets or unsets the 'toggled' class on the given element.
// Returns the *new* item state.
function ToggleElement( element )
{
    if (element.hasClassName('toggled')) {
        element.removeClassName('toggled');
        return false;
    }
    else
    {
        element.addClassName('toggled');
        return true;
    }
}

function ToggleChildItemVoteBtns( transport, bVotedUp )
{
	const json = transport.responseText.evalJSON();
	if ( json['items'] )
	{
		for ( let i = 0; i < json['items'].length; ++i )
		{
            const id = json['items'][i];

            const buttons  = FindVoteButtons(id, false);
            const voteUp   = buttons.voteUp;
            const voteDown = buttons.voteDown;

            if ( voteUp && voteDown )
            {
                (bVotedUp ? voteUp   : voteDown).addClassName( 'btn_active');
                (bVotedUp ? voteDown : voteUp).removeClassName('btn_active');
			}
		}
	}
}

function VoteUp(item_id)
{
	const buttons = FindVoteButtons(item_id);

	if ( ! buttons.voteUp.hasClassName( 'toggled' ) )
	{
		buttons.wait.show();
		var options = {
			method: 'post',
			postBody: 'id=' + item_id + '&sessionid=' + g_sessionID,
			onSuccess: (function(item_id){
				return function(transport)
				{
					buttons.wait.hide();

					if ( !CheckVoteResults( transport ) )
						return;

					ToggleChildItemVoteBtns( transport, true );

					var votesUpCount = $('VotesUpCount');
					if ( votesUpCount )
					{
						UpdateFormattedNumber( votesUpCount, 1 );
						$('VotesUpCountContainer').show();
					}

					buttons.voteUp.addClassName('toggled');
					buttons.voteDown.removeClassName('toggled');

					var voteLaterBtn = $('VoteLaterBtn');
					if ( voteLaterBtn )
					{
						voteLaterBtn.hide();
					}

					var blurb = $('rated_blurb');
					if( blurb != null )
						blurb.show();

					var next = $('voteNext');
					if( next != null )
						next.show();
				}
			}(item_id))
		};
		new Ajax.Request(
			'https://steamcommunity.com/sharedfiles/voteup',
			options
		);
	}
	return false;
}

function VoteDown(item_id)
{
	const buttons = FindVoteButtons(item_id);

	if ( ! buttons.voteDown.hasClassName( "toggled" ) )
	{
		var blurb = $('rated_blurb');
		if( blurb != null )
			blurb.hide();

        buttons.wait.show();

		var options = {
			method: 'post',
			postBody: 'id=' + item_id + '&sessionid=' + g_sessionID,
			onSuccess: (function(item_id){
				return function(transport)
				{
					buttons.wait.hide();

					if ( !CheckVoteResults( transport ) )
						return;

					ToggleChildItemVoteBtns( transport, false );

					var votesUpCount = $('VotesUpCount');
					if ( votesUpCount && buttons.voteUp.hasClassName( 'toggled' ) )
					{
						UpdateFormattedNumber( votesUpCount, -1 );
						if ( parseInt( votesUpCount.innerHTML ) == 0 )
						{
							$('VotesUpCountContainer').hide();
						}
					}

					buttons.voteUp.removeClassName('toggled');
					buttons.voteDown.addClassName('toggled');

					var voteLaterBtn = $('VoteLaterBtn');
					if ( voteLaterBtn )
					{
						voteLaterBtn.hide();
					}

					var next = $('voteNext');
					if( next != null )
						next.show();
				}
			}(item_id))
		};
		new Ajax.Request(
			'https://steamcommunity.com/sharedfiles/votedown',
			options
		);
	}

	return false;
}

function PublishedFileAward( id, fileType, currentSelection )
{
	function callbackFunc( id, award )
	{
		var rewardsCtn = $J.find( ".review_award_ctn" );
		if ( rewardsCtn.length != 0 )
		{
			rewardsCtn = $J( rewardsCtn[0] );
			var bFoundExisting = false;
			var rewards = rewardsCtn.find( ".review_award" );
			for ( var j = 0; j < rewards.length; ++j )
			{
				var reward = $J( rewards[j] );
				if ( reward.data( "reaction" ) == award )
				{
					bFoundExisting = true;

					var count = parseInt( reward.data( "reactioncount" ) );
					var countElem = reward.find( ".review_award_count" );
					countElem.text( count + 1 );
					countElem.removeClass( "hidden" );

					reward.data( "reactioncount", count + 1 );
					break;
				}
			}

			if ( !bFoundExisting )
			{
				var reward = $J( "<span>", { class: "review_award" } );
				var img = $J( "<img>", { class: "review_award_icon tooltip", src: "https://store.akamai.steamstatic.com/public/images/loyalty/reactions/still/" + award + ".png" } );
				reward.append( img );

				var countElem = $J( "<span>", { class: "review_award_count hidden", text: "1" } );
				reward.append( countElem );
				reward.data( "reaction", award );
				reward.data( "reactioncount", 1 );
				rewardsCtn.append( reward );
			}
		}
	};

	fnLoyalty_ShowAwardModal( id, 2, callbackFunc, fileType, currentSelection );
}

function ToggleItemState(item_id, app_id, buttonType, activate, deactivate) {
    const buttons = FindVoteButtons(item_id);

    buttons.wait.show();

    const clickedButton = buttons[buttonType];

    const options = {
        method: 'post',
        parameters: {
            'id': item_id,
            'appid': app_id,
            'sessionid': g_sessionID
        },
        onSuccess: function () {
            buttons.wait.hide();
            const buttonNowOn = ToggleElement(clickedButton);

            // If the button is now on, and there's a panel to switch in...
            if (clickedButton.hasClassName("panelSwitch") && ! buttonNowOn)
            {
                $("Unsubscribed" + item_id).show();
                $("Subscription" + item_id).hide();
            }
        }
    };

    let endpoint = "https://steamcommunity.com";
    endpoint += clickedButton.hasClassName("toggled") ? deactivate : activate;

    new Ajax.Request(endpoint, options);
}

function ToggleFavorite(item_id, app_id)
{
    ToggleItemState(item_id, app_id, 'favorite', '/sharedfiles/favorite', '/sharedfiles/unfavorite');
}

function ToggleSubscribed(item_id, app_id)
{
    ToggleItemState(item_id, app_id, 'subscribe', '/sharedfiles/subscribe', '/sharedfiles/unsubscribe');
}

function VoteLater(item_id)
{
	if ( !$('VoteLaterBtn').hasClassName( "toggled" ) )
	{
		var blurb = $('rated_blurb');
		if( blurb != null )
			blurb.hide();

		$('action_wait').show();

		var options = {
			method: 'post',
			postBody: 'id=' + item_id + '&sessionid=' + g_sessionID,
			onSuccess: (function(item_id){
				return function(transport)
				{
					$('action_wait').hide();

					if ( !CheckVoteResults( transport ) )
						return;

					$('VoteLaterBtn').addClassName('toggled');

					var next = $('voteNext');
					if( next != null )
						next.show();
				}
			}(item_id))
		};
		new Ajax.Request(
			'https://steamcommunity.com/sharedfiles/votelater',
			options
		);
	}

	return false;
}

/* used for collection votes for now */
function ValidateVoteSuccess( transport )
{
	if ( !transport.responseJSON )
	{
		ShowAlertDialog( 'Ошибка', 'При обработке вашего запроса произошла ошибка: unknown' );
	}
	else if ( transport.responseJSON.success == 21 )
	{
		ShowAlertDialog( 'Ошибка', 'Чтобы выполнить это действие, войдите в аккаунт.' );
	}
	else if ( transport.responseJSON.success == 24 )
	{
		ShowAlertDialog( 'Ошибка', 'Ваш аккаунт не отвечает необходимым требованиям для использования этой функции. Подробности на сайте <a class="whiteLink" href="https://help.steampowered.com/ru/wizard/HelpWithLimitedAccount" target="_blank" rel="">службы поддержки Steam</a>.' );
	}
	else if ( transport.responseJSON.success == 16 )
	{
		ShowAlertDialog( 'Ошибка', 'Не удалось отправить запрос на наши серверы. Пожалуйста, попробуйте ещё раз.' );
	}
	else if ( transport.responseJSON.success == 41 )
	{
		ShowAlertDialog( 'Ошибка', 'Недавно с вашего аккаунта положительно оценили объект, заблокированный за нарушение правил и принципов Steam. По этой причине вам временно запрещено оценивать пользовательский контент.' );
	}
	else if ( transport.responseJSON.success != 1 )
	{
		ShowAlertDialog( 'Ошибка', 'При обработке вашего запроса произошла ошибка: ' + transport.responseJSON.success );
	}

	return transport.responseJSON && transport.responseJSON.success == 1;
}

function PublishedFileVoteUp( id )
{
	if ( !$('vote_up_' + id).hasClassName( 'btn_active' ) )
	{
		var options = {
			method: 'post',
			postBody: 'id=' + id + '&sessionid=' + g_sessionID,
			onComplete: (function(id){
				return function(transport)
				{
					if ( ValidateVoteSuccess( transport ) )
					{
						$('vote_up_' + id).addClassName('btn_active');
						$('vote_down_' + id).removeClassName('btn_active');
					}
				}
			}(id))
		};
		new Ajax.Request(
			'https://steamcommunity.com/sharedfiles/voteup',
			options
		);
	}
}

function PublishedFileVoteDown( id )
{
	if ( !$('vote_down_' + id).hasClassName( 'btn_active' ) )
	{
		var options = {
			method: 'post',
			postBody: 'id=' + id + '&sessionid=' + g_sessionID,
			onComplete: (function(id){
				return function(transport)
				{
					if ( ValidateVoteSuccess( transport ) )
					{
						$('vote_up_' + id).removeClassName('btn_active');
						$('vote_down_' + id).addClassName('btn_active');
					}
				}
			}(id))
		};
		new Ajax.Request(
			'https://steamcommunity.com/sharedfiles/votedown',
			options
		);
	}
}

function ReportItem()
{
	if ( $('ReportItemBtn') && $('ReportItemBtn').hasClassName( "toggled" ) )
		return;

	var dialog = ShowPromptWithTextAreaDialog( 'Пожаловаться на этот продукт', '', null, null, 1000 );
	var explanation = $J('<div/>', { 'class': 'report_dialog_explanation' } );
	explanation.html( 'Пожалуйста, укажите причину, по которой этот предмет нарушает условия использования Steam. Приведите всю необходимую информацию и ссылки. Отправленную жалобу невозможно отменить.' );

	var dmcaLink = $J('<div/>', { 'class': 'report_dialog_explanation' } );
	dmcaLink.html( 'Если вы как владелец хотите пожаловаться на нарушение авторского права, заполните <a href="https://steamcommunity.com/dmca/create/" target="_blank">эту форму</a>.' );
	var actualLink = dmcaLink.find( "a" )[0];
	actualLink.href += publishedfileid;

	var trademarkLink = $J('<div/>', { 'class': 'report_dialog_explanation' } );
	trademarkLink.html( 'Отправить жалобу на нарушение товарного знака можно <a href="https://steamcommunity.com/trademark/createtrademarkcomplaint/" target="_blank">здесь</a>.' );
	var actualLink2 = trademarkLink.find( "a" )[0];
	actualLink2.href += publishedfileid;

	var textArea = dialog.m_$Content.find( 'textarea' );
	textArea.addClass( "report_dialog_text_area" );
	textArea.parent().before( explanation );
	textArea.parent().after( trademarkLink );
	textArea.parent().after( dmcaLink );

	dialog.done( function( data ) {
		data = v_trim( data );
		if ( data.length < 1 )
		{
			alert( 'Пожалуйста, укажите причину.')
			return;
		}
		$J.post( 'https://steamcommunity.com/sharedfiles/reportitem', {
				'id' : publishedfileid,
				'description' : data,
				'sessionid' : g_sessionID
			}
		).done( function( json ) {
				if ( !CheckVoteResultsJSON( json ) )
					return;

				$('ReportItemBtn').className = "general_btn report toggled";
		} );
	} );
}

function SharedFiles_BlockAuthorModal( author, strPersonaName )
{
	ShowConfirmDialog( 'Заблокировать',
		'Вы собираетесь заблокировать %s.'.replace( /%s/, strPersonaName ),
		'Да, заблокировать'
	).done( function() {
		$J.post(
			'https://steamcommunity.com/actions/BlockUserAjax',
			{sessionID: g_sessionID, steamid: author, block: 1 }
		).done( function() {
			ShowAlertDialog( 'Заблокировать',
				'Вы заблокировали этого пользователя.'
			).done( function() {
				window.top.location.reload();
			} );
		} ).fail( function() {
			ShowAlertDialog( 'Заблокировать',
				'Произошла ошибка при обработке вашего запроса. Пожалуйста, повторите попытку.'
			);
		} );
	} );
}

function HideSharePoup()
{
	$('SharePopup').hide();
	$('ShareItemBtn').removeClassName( 'toggled' );
}

function SendSubscribeItemRequest()
{
	$('action_wait').show();
	$('PublishedFileSubscribe').request( {
		onSuccess: function( response )
		{
			switch( response.responseJSON.success )
			{
				case 1:
				{
					if ($('JustSubscribed') !== null )
					{
						$('JustSubscribed').show();
					}
					$('SubscribeItemBtn').addClassName("toggled");
					$('SubscribeItemOptionAdd').className = "subscribeOption add";
					$('SubscribeItemOptionSubscribed').className = "subscribeOption subscribed selected";
				}
				break;

				case 15:
				{
					ShowAlertDialog( "Ошибка", "Вы не можете подписаться на этот товар." );
				}
				break;

				case 25:
				{
					ShowAlertDialog( "Ошибка", "Вы не можете подписаться на этот продукт, поскольку вы достигли ограничения на число подписок в магазине Steam (15 000)." );
				}
				break;

				default:
				{
					ShowAlertDialog( "Ошибка", "Не удалось подписаться на этот товар. Повторите попытку позже." );
				}
				break;
			}

			$('action_wait').hide();
		}
	} );
}

function SubscribeItem()
{
	if ( !$('SubscribeItemBtn').hasClassName( "toggled" ) )
	{
		if ( $J( "[name=requiredItems]").length != 0 )
		{
			var requiredItems = $J( "#RequiredItems").clone();
			requiredItems.prepend( 'Для нормальной работы потребуются все следующие продукты.<br><br>Прежде чем продолжить, вы можете нажать на них, чтобы узнать подробности и подписаться.<br><br>' );
			var dialog = ShowConfirmDialog( 'Дополнительные необходимые продукты', requiredItems, 'Продолжить' );
			dialog.done( function() {
				SendSubscribeItemRequest();
			} );
		}
		else
		{
			SendSubscribeItemRequest();
		}
	}
	else
	{
		$('action_wait').show();
		$('PublishedFileUnsubscribe').request( {
			onSuccess: function( response )
			{
				if ($('JustSubscribed') !== null )
				{
					$('JustSubscribed').hide();
				}
				$('SubscribeItemBtn').removeClassName("toggled");
				$('SubscribeItemOptionAdd').className = "subscribeOption add selected";
				$('SubscribeItemOptionSubscribed').className = "subscribeOption subscribed";
				$('action_wait').hide();
			}
		} );
	}
}


function SubscribeInlineItem( id, appID )
{
	$J('#action_wait_' + id).show();

	var params = {
		id: id,
		appid: appID,
		sessionid: g_sessionID
	};

	if ( !$J('#SubscribeItemBtn' + id ).hasClass( "toggled" ) )
	{
		$J.post( "https://steamcommunity.com/sharedfiles/subscribe", params )
		.done( function( data ) {
			$J('#SubscribeItemBtn' + id).addClass( "toggled" );
			$J('#user_action_history_icon_subscribed' + id ).show();
			$J('#action_wait_' + id).hide();
		} );
	}
	else
	{
		$J.post( "https://steamcommunity.com/sharedfiles/unsubscribe", params )
		.done( function( data ) {
			$J('#SubscribeItemBtn' + id).removeClass( "toggled" );
			$J('#user_action_history_icon_subscribed' + id ).hide();
			$J('#action_wait_' + id).hide();
		} );
	}
}


function FavoriteItem()
{
	$('action_wait').show();
	if ( !$('FavoriteItemBtn').hasClassName( "toggled" ) )
	{
		$('PublishedFileFavorite').request( {
			onComplete: function()
			{
				$('JustFavorited').show();
				$('FavoriteItemBtn').className = "general_btn favorite toggled";
				$('FavoriteItemOptionAdd').className = "favoriteOption addfavorite";
				$('FavoriteItemOptionFavorited').className = "favoriteOption favorited selected";
				$('action_wait').hide();
			}
		} );
	}
	else
	{
		$('PublishedFileUnfavorite').request( {
			onComplete: function()
			{
				$('JustFavorited').hide();
				$('FavoriteItemBtn').className = "general_btn favorite";
				$('FavoriteItemOptionAdd').className = "favoriteOption addfavorite selected";
				$('FavoriteItemOptionFavorited').className = "favoriteOption favorited";
				$('action_wait').hide();
			}
		} );
	}
}

function FollowItem(item_id, app_id)
{
	$('action_wait').show();

	var bShouldFollow = !$('FollowItemBtn').hasClassName('toggled');

	var options = {
		method: 'post',
		parameters: {
			'id' : item_id,
			'appid' : app_id,
			'sessionid' : g_sessionID,
			'follow' : bShouldFollow ? '1' : '0'
		},
		onSuccess: (function(item_id){
			return function(transport)
			{
				$('action_wait').hide();

				if ( !CheckVoteResults( transport ) )
					return;

				if ( bShouldFollow )
				{
					$('FollowItemBtn').addClassName('toggled');
					$('FollowItemOptionAdd').removeClassName('selected');
					$('FollowItemOptionFollowed').addClassName('selected');
				}
				else
				{
					$('FollowItemBtn').removeClassName('toggled');
					$('FollowItemOptionAdd').addClassName('selected');
					$('FollowItemOptionFollowed').removeClassName('selected');
				}
			}
		}(item_id))
	};
	new Ajax.Request(
		'https://steamcommunity.com/sharedfiles/followitem',
		options
	);
}

function CloseNotification( notification )
{
	$( notification ).hide();
}

function SubscribeCollectionItem( id, appID )
{
	$('action_wait_' + id).show();
	if ( !$('SubscribeItemBtn' + id ).hasClassName( "toggled" ) )
	{
		$('PublishedFileSubscribe').id.value = id;
		$('PublishedFileSubscribe').appid.value = appID;
		$('PublishedFileSubscribe').request( {
			onSuccess: function( response )
			{
				$('SubscribeItemBtn' + id).className = "general_btn subscribe toggled";
				$('action_wait_' + id).hide();
			}
		} );
	}
	else
	{
		$('PublishedFileUnsubscribe').id.value = id;
		$('PublishedFileUnsubscribe').appid.value = appID;
		$('PublishedFileUnsubscribe').request( {
			onSuccess: function( response )
			{
				$('SubscribeItemBtn' + id).className = "general_btn subscribe";
				$('action_wait_' + id).hide();
			}
		} );
	}
}

function SetImageDimensionsForFile( fileID, elemIDImageWidth, elemIDImageHeight, elemIDImage )
{
	if ( typeof FileReader !== "undefined" )
	{
		var file = $( fileID ).files[0];
		var reader = new FileReader();
		reader.onload = (function(f) {
			return function() {
				var i = new Image();
				i.onload = (function(e) {
					var height, width;
					width = e.target.width;
					height = e.target.height;
					$( elemIDImageWidth ).value = width;
					$( elemIDImageHeight ).value = height;
					var pageImage = $( elemIDImage );
					if ( pageImage )
					{
						pageImage.src = i.src;
					}
				});
				return i.src = reader.result;
			};
		})(file);
		return reader.readAsDataURL(file);
	}
}

function ShowAddToCollection( id, appID )
{
	// hide children
	$J( '#AddToCollectionDialogNoEligibleCollections' ).hide();
	var $dialogContents = $J( '#AddToCollectionDialogContents' );
	$dialogContents.hide();
	$J('#AddToCollectionDialogLoading').show();

	var waitDialog = ShowBlockingWaitDialog( 'В коллекцию', $J( '#AddToCollectionDialogLoading' ) );
	waitDialog.SetRemoveContentOnDismissal( false );

	// ajax request to get the user's collections
	$J.post( 'https://steamcommunity.com/sharedfiles/ajaxgetmycollections',
		{
			'appid' : appID,
			'publishedfileid' : id,
			'sessionid' : g_sessionID
		}
	).always( function() {
		waitDialog.Dismiss();
		$J( '#AddToCollectionDialogLoading' ).hide();
	}
	).done( function( json ) {
		// show dialog
		$( 'AddToCollectionDialog' ).show();
		var dialog = ShowConfirmDialog( 'В коллекцию', $( 'AddToCollectionDialog' ) );
		dialog.SetRemoveContentOnDismissal( false );	// we want to check what was in the array for sending diffs

		var set_parent_collections = new Array();

		var numAdded = 0;
		$dialogContents.empty();

		var all_collections = json['all_collections'];
		var parent_collections = json['parent_collections'];

		// create a set we can quickly look at
		if ( 'publishedfiledetails' in parent_collections )
		{
			var publishedFileDetails = parent_collections['publishedfiledetails'];
			for ( var i = 0; i < publishedFileDetails.length; ++i )
			{
				var details = publishedFileDetails[i];
				set_parent_collections[details['publishedfileid']] = 'in_collection';
			}
		}

		// now create the list
		if ( 'publishedfiledetails' in all_collections )
		{
			var publishedFileDetails = all_collections['publishedfiledetails'];
			for ( var i = 0; i < publishedFileDetails.length; ++i )
			{
				var details = publishedFileDetails[i];
				var publishedFileID = details['publishedfileid'];
				// don't allow the current item if it is a collection
				if ( details['result'] != 1 || publishedFileID == id )
				{
					continue;
				}
				var $container = $J('<div/>', {'class': 'add_to_collection_dialog_container'} );
				var $input = $J('<input/>', {'type' : 'checkbox', 'class': 'add_to_collection_dialog_checkbox', 'name' : 'collections[' + publishedFileID + ']', 'id' : publishedFileID, 'data-title' : details['title'] } );
				if ( set_parent_collections[publishedFileID] === "in_collection" )
				{
					$input.prop( 'checked', true );
				}
				$container.append( $input );
				var $title = ( $J('<label/>', {'class': 'add_to_collection_dialog_title', 'for' : publishedFileID } ).text( details['title'] ) );
				$container.append( $title );
				$dialogContents.append( $container );
				numAdded++;
			}
		}
		if ( numAdded == 0 )
		{
			$( 'AddToCollectionDialogNoEligibleCollections' ).show();
		}
		else
		{
			ShowWithFade( 'AddToCollectionDialogContents' );
		}

		// function for when the user clicks OK
		dialog.done( function() {
			var params = {
				'sessionID' : g_sessionID,
				'publishedfileid' : id
			};

			var inputs = $J( '.add_to_collection_dialog_checkbox' );
			for ( var i = 0; i < inputs.length; ++i )
			{
				var input = inputs[i];
				var publishedFileID = input.id;
				if ( set_parent_collections[publishedFileID] === "in_collection" )
				{
					if ( !input.checked )
					{
						params['collections[' + publishedFileID + '][remove]'] = true;
						params['collections[' + publishedFileID + '][title]'] = $J( input ).data( 'title' );
					}
				}
				else
				{
					if ( input.checked )
					{
						params['collections[' + publishedFileID + '][add]'] = true;
						params['collections[' + publishedFileID + '][title]'] = $J( input ).data( 'title' );
					}
				}
			}

			$J.post( 'https://steamcommunity.com/sharedfiles/ajaxaddtocollections',
				params
		).done( function( data ){
				dialog.Dismiss();
			}).fail( function( jqxhr ) {
				dialog.Dismiss();
				var errorText = 'Не удалось добавить этот предмет в следующие коллекции:<br><br>';
				for ( var i = 0; i < jqxhr.responseJSON.results.length; ++i )
				{
					var title = jqxhr.responseJSON.results[i].error;
					errorText += title + '<br>';
				}
				ShowAlertDialog( 'В коллекцию', errorText );
			});
		} );
	} );
}

function RemoveTaggedUser( publishedfileid, accountid )
{
	ShowConfirmDialog( 'Вы уверены?', 'Вы собираетесь удалить себя из отметок к этому скриншоту. Вы уверены?', 'Удалить', 'Отмена'
	).done( function() {
		$J.post( 'https://steamcommunity.com/sharedfiles/removetaggeduser', {
			'accountid': accountid,
			'publishedfileid' : publishedfileid,
			'sessionid' : g_sessionID
			}
		).done( function( json ){
			jQuery("#friendLink_" + accountid ).remove();
		})
	});
}

function ResendItemSubmissionVerificationEmail( publishedfileid )
{
	$J.post( 'https://steamcommunity.com/sharedfiles/ajaxresendverificationemail/', {
			'sessionid' : g_sessionID,
			'id' : publishedfileid
		}
	).done( function( json ){
		ShowAlertDialog( 'Письмо отправлено', 'На привязанную к аккаунту электронную почту отправлено письмо. В нём вы найдёте ссылку, по которой вы сможете подтвердить публикацию работы.' );
	} ).fail( function( jqxhr )	{
		ShowAlertDialog( 'Ошибка', 'Не удалось отправить письмо. Пожалуйста, повторите попытку позже.' );
	} );
}

function SelectItemVisibility( publishedfileid, value )
{
	HideMenu( $('visibilityselect'), $('visibilityselect_options') );

	var rgParams = {
		sessionid: g_sessionID,
		id: publishedfileid,
		visibility: value
	};

	$J.post(
		"https://steamcommunity.com/sharedfiles/itemsetvisibility",
		rgParams
	)
	.done( function( rgResult ) {
		$J('#visibilityNotificationPrivate').hide();
		$J('#visibilityNotificationFriendsOnly').hide();
		$J('#visibilityNotificationUnlisted').hide();
		$J('#visibilityselect_option_0_check').css( 'visibility', 'hidden' );
		$J('#visibilityselect_option_1_check').css( 'visibility', 'hidden' );
		$J('#visibilityselect_option_2_check').css( 'visibility', 'hidden' );
		$J('#visibilityselect_option_3_check').css( 'visibility', 'hidden' );

		switch ( value )
		{
			case '0':
				$J('#visibilityselect_option_0_check').css( 'visibility', 'visible' );
				break;
			case '1':
				$J('#visibilityNotificationFriendsOnly').show();
				$J('#visibilityselect_option_1_check').css( 'visibility', 'visible' );
				break;
			case '2':
				$J('#visibilityNotificationPrivate').show();
				$J('#visibilityselect_option_2_check').css( 'visibility', 'visible' );
				break;
			case '3':
				$J('#visibilityNotificationUnlisted').show();
				$J('#visibilityselect_option_3_check').css( 'visibility', 'visible' );
				break;
		}
	} )
	.fail( function( jqXHR ) {
		ShowAlertDialog( "\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430", "\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 (%1$s). \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043f\u043e\u0437\u0436\u0435".replace('%1$s', jqXHR.responseJSON.success) );
	} );
}

function ShowPublicComments()
{
	var commentsPublic = document.getElementById( 'PublicComments' );
	var commentsDev = document.getElementById( 'DeveloperComments' );
	commentsPublic.style.display = "block";
	commentsDev.style.display = "none";

	var commentsTabPublic = document.getElementById( 'PublicCommentsTab' );
	var commentsTabDev = document.getElementById( 'DeveloperCommentsTab' );
	commentsTabPublic.className = "commentsTab active";
	commentsTabDev.className = "commentsTab";
}

function ShowDeveloperComments()
{
	var commentsPublic = document.getElementById( 'PublicComments' );
	var commentsDev = document.getElementById( 'DeveloperComments' );
	commentsPublic.style.display = "none";
	commentsDev.style.display = "block";

	var commentsTabPublic = document.getElementById( 'PublicCommentsTab' );
	var commentsTabDev = document.getElementById( 'DeveloperCommentsTab' );
	commentsTabPublic.className = "commentsTab";
	commentsTabDev.className = "commentsTab active";
}

